1. Въведение

За кратко време облачните технологии се превърнаха в водеща тенденция в софтуерната индустрия. Те представят нов начин,
по който да се водим и мислим, за изграждането на големи, сложни системи, подход, който се възползва изцяло от съвременните
практики за разработка на високо-качествен софтуер и инфраструктура.  Предлага промени в начина, по който проектираме, интегрираме и внедряваме системите.
Облачно базираните системи са проектирани да приемат бързо промените, да обслужват голям мащаб от хора и да бъдат устойчиви на всякакъв вид натоварване или хакерски атаки. 
Cloud Native Computing Foundation предоставя официално определение:
Технологиите, базирани на облак, дават възможност на организациите да създават и изпълняват мащабируеми приложения в модерни,
динамични среди като публични, частни и хибридни облаци, чрез мрежи от услугу и микроуслуги. Качества на системите са устойчивост, висока наличност и достъпност, 
мащабируемост и управляемост, които са критични преимущества за много от бизнес единиците.

Автоматизацията на тези процеси позволява на инженерите да правят промени, с голямо въздействие, но с минимални усилия. 
Приложенията стават все по-сложни, като изискванията от потребителите са все повече и повече, главно насочени към
бърза реакция, иновативни функции и нулев престой. Проблеми с производителността, повтарящи се
грешки и базови хакерски атаки вече не са приемливи. Тези предиства поставят бизнеса на една стъпка пред конкурентите.
Облачно базираните системи се свързват главно с бързина. 

Бизнес системите се развиват от способностите на бизнеса
да бъдат инструменти за стратегическа трансформация, като ускорят растежа на компанията. Незабавното пускане на иновативните идеи на пазара е от критична тема за всички модерни  компании. Нека разгледаме два примера, които са приложили тези техники:

- Netflix има над 600 услуги в производствена среда. Стотици пъти на ден се изпълняват нови внедрявания и разгръщания на същестуваши.
- Uber  има над 1000 услуги в производствена среда. Разгръщат се няколко хиляди пъти всяка седмица.

Както може да видим тези две компании са базирани на системи, които се състоят от стотици независими
микроуслуги. Този архитектурен стил им позволява бързо да реагират на пазарните условия като
постоянно да актуализират малки, но важни области. 
Скоростта и пъргавината на облачния носител се дължат на редица фактори, като на първо място е инфраструктурата на изчислителните ресурси.

По примери и указания на водещи експерти от общността, нека разгледаме характеристики и изисквания на функционален облачен продукт, 
демонстриращ използването на .NET, Docker, Kubernetes в облачната среда на Microsoft Azure за да се създаде онлайн магазин.


1. 
Повечето традиционни .NET приложения се внедряват като единици, съответстващи на изпълними файлове или казано по друг начин
уеб приложения, работещи в рамките на един домейн на IIS приложение. Този подход е най-простият
модел за внедряване и обслужва добре много вътрешни и по-малки публични приложения.
Това са така наречените монолитни приложения- напълно самостоятелни по отношение на своето поведение. Могат да взаимодействат
с други услуги или хранилища на данни в хода на извършване на своите операции, но ядрото на тяхното
поведение се изпълнява в рамките на собствен процес и цялото приложение обикновено се разгръща като самостоятелна единица. Ако
такова приложение трябва да се мащабира хоризонтално, обикновено цялото приложение се дублира върху множество сървъри или виртуални машини

Приложения всичко в едно В тази архитектура, цялата логика на приложението се съдържа в един проект, компилиран и внедрен като самостоятелна единица. Шаблонът на нов нов проект ASP.NET Core, независимо дали е създаден във Visual Studio или от командния ред, започва като
прост монолит „всичко в едно“. Той съдържа цялото поведение на приложението, включително
логика за представяне, бизнес и достъп до данни.


Разделянето на логиката се постига чрез използването на папки. По подразбиране шаблонът включва отделни папки за отговорности на MVC (модели, изгледи и контролери)
както и допълнителни папки за данни и услуги. Макар и просто, монолитното решение за един проект има някои недостатъци: когато размер и сложността на проекта
нарастват, броят на файловете и папките също ще продължи да расте. Бизнес логиката е разпръсната между моделите и класовете на услуги без ясна индикация. Тази липса на организация на ниво проект често води до т.н "спагети код".
За да се справят с тези проблеми, приложенията често се развиват в многопроектни решения, където е всеки проект
счита се, че се намира в определен слой на приложението.

Чрез организиране на кода в слоеве, общата функционалност на ниско ниво може да бъде пре-използвана. Тази повторна употреба е от полза, защото показва, че трябва да се пише по-малко код и стандартизирането на една реализация, следвайки инструкциите на принципа за предотвратяване на повторенията (DRY) .

Многослойна архитектура помага за постигане на капсулиране на логитана на приложението.

Модулите, които приложението ще включва са: удостоверяване, каталог, поръчки и др. Един от логическите словре ще е специфичен за комуникира с голяма релационна база данни, друг слой ще визуализира данните чрез HTML интерфейс. Монолитите приложения са лесни за…
• изграждане
• тестване
• разгръщане
• отстраняване на неизправности
• разширяване на мащаба
Много успешни приложения, които съществуват днес, са създадени като монолити. Приложението е хит и продължава да бъде
развиват се, итерация след итерация, добавяйки повече функционалност.
В един момент обаче започвате да се чувствате неудобно. Откривате, че губите контрол над
приложение. С течение на времето усещането става по-интензивно и в крайна сметка влизате в състояние
известен като цикъла на страха.
• Приложението е станало толкова невероятно сложно, че нито един човек не го разбира.
• Страхувате се да правите промени – всяка промяна има нежелани и скъпи странични ефекти.
• Новите функции/поправки стават трудни, отнемащи време и скъпи за прилагане.
• Всяка версия е възможно най-малка и изисква пълно разгръщане на цялото приложение.
• Един нестабилен компонент може да срине цялата система.
• Новите технологии и рамки не са опция.
• Трудно е да се прилагат гъвкави методологии за доставка.
• Архитектурната ерозия настъпва, тъй като кодовата база се влошава с безкрайни „специални случаи“.
• Консултантите ви казват да го пренапишете.

показва същата система, изградена с прилагане на облачни техники и практики:

Приложението е разделено в набор от малки изолирани микроуслуги - популярен архитектурен стил за изграждане на модерни
приложения. Всяка услуга е самостоятелена и капсулира свой собствен код, данни и зависимости. Те споделят следните характеристики:
• Всяка реализира специфична бизнес способност в рамките на по-голям контекст
• Всяка от тях се разработва автономно и може да бъде внедрена независимо от другите.
• Всяка е самостоятелена, като капсулира своя собствена технология за съхранение на данни (SQL, NoSQL) и платформа за програмиране.
• Всеки работи в свой собствен процес и комуникира с другите, използвайки стандартна комуникация протоколи като HTTP/HTTPS, WebSockets или AMQP.
