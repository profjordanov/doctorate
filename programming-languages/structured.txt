1. Въведение

За кратко време облачните технологии се превърнаха в водеща тенденция в софтуерната индустрия. Те представят нов начин,
по който да се водим и мислим, за изграждането на големи, сложни системи, подход, който се възползва изцяло от съвременните
практики за разработка на високо-качествен софтуер и инфраструктура.  Предлага промени в начина, по който проектираме, интегрираме и внедряваме системите.
Облачно базираните системи са проектирани да приемат бързо промените, да обслужват голям мащаб от хора и да бъдат устойчиви на всякакъв вид натоварване или хакерски атаки. 
Cloud Native Computing Foundation предоставя официално определение:
Технологиите, базирани на облак, дават възможност на организациите да създават и изпълняват мащабируеми приложения в модерни,
динамични среди като публични, частни и хибридни облаци, чрез мрежи от услугу и микроуслуги. Качества на системите са устойчивост, висока наличност и достъпност, 
мащабируемост и управляемост, които са критични преимущества за много от бизнес единиците.

Автоматизацията на тези процеси позволява на инженерите да правят промени, с голямо въздействие, но с минимални усилия. 
Приложенията стават все по-сложни, като изискванията от потребителите са все повече и повече, главно насочени към
бърза реакция, иновативни функции и нулев престой. Проблеми с производителността, повтарящи се
грешки и базови хакерски атаки вече не са приемливи. Тези предиства поставят бизнеса на една стъпка пред конкурентите.
Облачно базираните системи се свързват главно с бързина. 

Бизнес системите се развиват от способностите на бизнеса
да бъдат инструменти за стратегическа трансформация, като ускорят растежа на компанията. Незабавното пускане на иновативните идеи на пазара е от критична тема за всички модерни  компании. Нека разгледаме два примера, които са приложили тези техники:

- Netflix има над 600 услуги в производствена среда. Стотици пъти на ден се изпълняват нови внедрявания и разгръщания на същестуваши.
- Uber  има над 1000 услуги в производствена среда. Разгръщат се няколко хиляди пъти всяка седмица.

Както може да видим тези две компании са базирани на системи, които се състоят от стотици независими
микроуслуги. Този архитектурен стил им позволява бързо да реагират на пазарните условия като
постоянно да актуализират малки, но важни области. 
Скоростта и пъргавината на облачния носител се дължат на редица фактори, като на първо място е инфраструктурата на изчислителните ресурси.

По примери и указания на водещи експерти от общността, нека разгледаме характеристики и изисквания на функционален облачен продукт, 
демонстриращ използването на .NET, Docker, Kubernetes в облачната среда на Microsoft Azure за да се създаде онлайн магазин.


1. 
Повечето традиционни .NET приложения се внедряват като единици, съответстващи на изпълними файлове или казано по друг начин
уеб приложения, работещи в рамките на един домейн на IIS приложение. Този подход е най-простият
модел за внедряване и обслужва добре много вътрешни и по-малки публични приложения.
Това са така наречените монолитни приложения- напълно самостоятелни по отношение на своето поведение. Могат да взаимодействат
с други услуги или хранилища на данни в хода на извършване на своите операции, но ядрото на тяхното
поведение се изпълнява в рамките на собствен процес и цялото приложение обикновено се разгръща като самостоятелна единица. Ако
такова приложение трябва да се мащабира хоризонтално, обикновено цялото приложение се дублира върху множество сървъри или виртуални машини

Приложения всичко в едно В тази архитектура, цялата логика на приложението се съдържа в един проект, компилиран и внедрен като самостоятелна единица. Шаблонът на нов нов проект ASP.NET Core, независимо дали е създаден във Visual Studio или от командния ред, започва като
прост монолит „всичко в едно“. Той съдържа цялото поведение на приложението, включително
логика за представяне, бизнес и достъп до данни.


Разделянето на логиката се постига чрез използването на папки. По подразбиране шаблонът включва отделни папки за отговорности на MVC (модели, изгледи и контролери)
както и допълнителни папки за данни и услуги. Макар и просто, монолитното решение за един проект има някои недостатъци: когато размер и сложността на проекта
нарастват, броят на файловете и папките също ще продължи да расте. Бизнес логиката е разпръсната между моделите и класовете на услуги без ясна индикация. Тази липса на организация на ниво проект често води до т.н "спагети код".
За да се справят с тези проблеми, приложенията често се развиват в многопроектни решения, където е всеки проект
счита се, че се намира в определен слой на приложението.

Чрез организиране на кода в слоеве, общата функционалност на ниско ниво може да бъде пре-използвана. Тази повторна употреба е от полза, защото показва, че трябва да се пише по-малко код и стандартизирането на една реализация, следвайки инструкциите на принципа за предотвратяване на повторенията (DRY) .

Многослойна архитектура помага за постигане на капсулиране на логитана на приложението.

Модулите, които приложението ще включва са: удостоверяване, каталог, поръчки и др. Един от логическите словре ще е специфичен за комуникира с голяма релационна база данни, друг слой ще визуализира данните чрез HTML интерфейс. Монолитите приложения са лесни за…
• изграждане
• тестване
• разгръщане
• отстраняване на неизправности
• разширяване на мащаба
Много успешни приложения, които съществуват днес, са създадени като монолити. Приложението е хит и продължава да бъде
развиват се, итерация след итерация, добавяйки повече функционалност.
В един момент обаче започвате да се чувствате неудобно. Откривате, че губите контрол над
приложение. С течение на времето усещането става по-интензивно и в крайна сметка влизате в състояние
известен като цикъла на страха.
• Приложението е станало толкова невероятно сложно, че нито един човек не го разбира.
• Страхувате се да правите промени – всяка промяна има нежелани и скъпи странични ефекти.
• Новите функции/поправки стават трудни, отнемащи време и скъпи за прилагане.
• Всяка версия е възможно най-малка и изисква пълно разгръщане на цялото приложение.
• Един нестабилен компонент може да срине цялата система.
• Новите технологии и рамки не са опция.
• Трудно е да се прилагат гъвкави методологии за доставка.
• Архитектурната ерозия настъпва, тъй като кодовата база се влошава с безкрайни „специални случаи“.
• Консултантите ви казват да го пренапишете.

показва същата система, изградена с прилагане на облачни техники и практики:

Приложението е разделено в набор от малки изолирани микроуслуги - популярен архитектурен стил за изграждане на модерни
приложения. Всяка услуга е самостоятелена и капсулира свой собствен код, данни и зависимости. Те споделят следните характеристики:
• Всяка реализира специфична бизнес способност в рамките на по-голям контекст
• Всяка от тях се разработва автономно и може да бъде внедрена независимо от другите.
• Всяка е самостоятелена, като капсулира своя собствена технология за съхранение на данни (SQL, NoSQL) и платформа за програмиране.
• Всеки работи в свой собствен процес и комуникира с другите, използвайки стандартна комуникация протоколи като HTTP/HTTPS, WebSockets или AMQP.

Микроуслугите осигуряват гъвкавост. Всяка микроуслуга има автономен жизнен цикъл и може да се развива независимо. Може да актуализираме малка област от сложно приложение с по-малък риск от нарушаване на цялата система. Всяка микросервис може да се разширява мащаба си независимо, като фокусът да бъде върху онези услуги, които изискват повече процесорна мощност или друг фактор. Този фин подход към мащабирането осигурява по-голям контрол над системата и помага за намаляване на общите разходи.

Микросервизите могат да бъдат създадени с всяка модерна платформа за разработка. Платформата на Microsoft .NET е отличен избор: безплатен и с отворен код, има много вградени функции за опростяване на разработването на микросервизи. .NET е кросплатформен. Приложенията могат да се изграждат и изпълняват на всички операционни системи: Windows, macOS и повечето разновидности на Linux. .NET е с висока производителност и има добри резултати в сравнение с Node.js и други конкурентни платформи.

Поддържащи услуги
Облачно базираните услуги зависят от различни спомагателни ресурси, като хранилища на данни, брокери на съобщения, услуги за наблюдение и идентификация. Тези услуги са известни като поддържащи услуги.

Във конкретния пример за функционалността на приложението е разделена на много отделни микроуслуги: отговарщи за удостоверяването и самоличността, изброяване на артикули от продуктовия каталог, управление на потребителските пазарски кошници и регистриране на поръчки. Координацията и комуникацията между услугите се извършва при чрез използване на шина за съобщения или друг вид комуникация. Всяка от различните микроуслуги е проектирана по различен начин, въз основа на техните индивидуални изисквания. Техният технологичен стек може да се различава. По-простите услуги осигуряват основен достъп от тип "Създаване-Прочетете-Актуализиране-Изтриване" (CRUD) до хранилища на данни, докато по-напредналите услуги използват подходи и модели, управлявани от домейн.

Azure е много подходящ за поддръжка на така структуриран онлайн магазин, тъй като проектът е създаден да бъде приложение, базирано на облак. 

Azure предоставя услуги, които могат да помогнат за постигане на много неща. Те варират от обикновени, като добавяне на ново приложение с база от данни – до към по-екзотични  като създаване на работни потоци за непрекъсната интеграция (CI) и непрекъснато внедряване (CD). Това са само няколко примера за някои често срещани проекти, които разработчиците е трябвало многократно да създават идивидуално, но всичко това вече се предлага като услуга, които се използват с много малко усилия. Силата на облака е, че услугите и ресурсите са невероятно устойчиви, малко вероятно е аврийно да спрат работа. Azure има центрове за данни по целия свят, пълни с десетки хиляди сървъри. Ако един сървър се повреди, друг поема управлението. 

Един от най-убедителните аргументи в полза на облака е, че може да разширява мащаба на услуги и ресурси почти безкрайно, което е почти невъзможно с локални ресурси. Също толкова, когато вече няма голямо натоварване, лесно може да се намали мащаба. Уважавани и опитни облачни доставчици като Microsoft разпознават моделите на използване на нормалните потребители и тези на злонамерените. Инфраструктурата е предпазена от най-често срещаните атаки. Интелигентни инструменти за наблюдение, алгоритми за обучение и изкуственият интелект предоставят възможност да откриват атаки в реално време.

Стартиране приложения в Azure - eдно от първите решения, които трябва бъдат вземети, са набора планираните за използване услуги. 
App Service - eдин от най-лесните и мощни начини за хостване на приложения. Услугите са достъпни и работят в 99,95% от времето. Споделят мощни функции като автоматично мащабиране, внедряване с нулев застой и лесно удостоверяване, позволяват отстраняването на грешки в приложението докато и докато работи в производствена среда (със Snapshot Debugger). По подразбиране приложениеto ще бъде достъпно в интернет, без да е необходимо да се настройва име на домейн или да се конфигурира DNS. Разработчиците, които трябва да поддържат високо ниво на контрол върху средата може да изпълнявават контейнери. Azure предоставя уникални възможности за мобилните приложения: поддържат офлайн синхронизиране, което позволява на приложението да продължи да работи когато няма интернет връзка. А push известията позволяват изпращането на съобщения до мобилните приложения използвайки C# код, независимо от платформата, на която работи (iOS, Android, Windows). 

azure functions - малки парчета код, които разработваме, без "притеснение" за основната инфраструктура.Друго наименование на този модел е "Функции като услуга (FaaS)". Целта им е да изпълнят няколко стъпки при вход. 

Azure Virtual Machines - това може да бъде лесен начин да започнете, защото позволява преместване на съществуващи приложения от виртуални машини, които вече се изпълняват във център за данни. Има много предварително дефинирани изображения, които могат да бъдат използвани като Windows Server, който работи с IIS и има инсталиран и предварително конфигуриран ASP.NET на него, както и собствени софтуерни лицензи (като за SQL Server). 

Данните са особено важен аспект на всяко модерно .NET приложение. Azure предоставя много видове хранилища за данни, които могат да помогнат за поддържка и извличане на данни. 

Azure SQL Database = Това е обачно базиран SQL Server. Поведението му е същото кото това на локалното изпълнение на базата, но предлага и много предимства: репликира в реално време данни в други географски региони, маскира данни за определени потребители, предоставя пълен одит на всички действия, които са се случили върху данните. 

Azure Cosmos DB е нов вид нерелационната база данни, която работи с механизъм за съхранение и предоставяне на данни, който използва свободен модел, също така включва ниска латентност, репликация на данни в други географски региони в реално време, управление на трафика, автоматично индексиране на данните. 

Azure Storage е една отосновните услуги за съхраняване на данни в различни форми, защото е лесена за използване, бърза и евтина. Също така е и много надежден. По подразбиране данните се репликират три пъти в рамките на център за данни. Azure File Storage, който е един от типовете хранилища, използва протокола SMB, което го прави много подходящ за създаване или преместване на файлов сървър в облака. Azure Blob позволява съхраняване на големи неструктурирани данни –могат да бъдат видеа, изображения, аудио или текстови записи или дори файлове на виртуален твърд диск (VHD) за виртуална машина.

Azure предоставя улуги за бази данни MySQL, PostgreSQL и MariaDB като универсално достъпни, мащабируеми, силно защитени и напълно управлявани

Azure помага за повишаване на производителността на приложенията с услуги като Azure Redis Cache, който осигурява високопроизводителен, базирана на "ключ-стойност" структура за съхранение. Друга подобна услуга е Azure Content Delivery Network, или CDN, която може да репликира статично съдържание, като изображения и видео файлове до точки по целия свят,
Azure Traffic Manager може да подобри "отзивчивостта" на приложението, като насочва потребителите към местоположениято с най-ниска латентност.

по време на изпълнение на приложението, инжектира идентификационни данни, които след това да бъдат използвани за достъп до други услуги

Azure предоставя водещ в индустрията пакет от услуги, които могат да направят приложенията по-интелигентни. Azure Cognitive Services са набор от програмни интерфейси, които могат да разпознават лица, да конвертират реч в текст и да разбират значението на въведен текст. С помощта на услугата "Разбиране на езика" можете да създавате ботове, които  интелигентно да отговаря на заявки в Slack, Microsoft Teams и други форуми.Можете също да създадете свои собствени алгоритми за машинно обучение с Azure Machine Learning.

Работата със стрийминг и медиини технологии е предизвикателство за много приложения. Azure Media Services предоставя услуги като кодиране на медийни файлове. Azure Content Protection позволява използването на DRM технологии като PlayReady, за осигорияване на защита на съдържанието (използване само от упълномощени
потребители). С помощта на Media Analytics може да се подобри качеството на медиията като например да създаде субтитри, базиран на реч от текущ ресурс.

В Azure има много услуги за извършване на анализ и трансформиране на данни, може да показва информация, използвайки собствен двигател за визуализация . 

Работата със стрийминг и медиини технологии е предизвикателство за много приложения. Azure Media Services предоставя услуги като кодиране на медийни файлове. Azure Content Protection позволява използването на DRM технологии като PlayReady, за осигорияване на защита на съдържанието (използване само от упълномощени потребители). С помощта на Media Analytics може да се подобри качеството на медиията като например да създаде субтитри, базиран на реч от текущ ресурс.


Контейнеризацията е подход, в сферата на разработката на софтуер, при който нодът на приложение, всички негови зависимости и конфигурациии са пакетирани воичен файл, наречен изображение на контейнер. Изображенията се съхраняват в регистър на контейнери, който работи като хранилище или библиотека за изображения. Изображението  се трансформира в работещ екземпляр на контейнер, който може да се тества като самостоятелна единица. Точно както транспортните контейнери позволяват транспортирането на стоки, независимо от товарите вътре, софтуерните контейнери се възприемат като стандартна единица за внедряване на софтуер, която може да съдържа различен код и зависимости. Контейнеризирането на софтуера дава възможност на разработчиците и ИТ специалистите автоматично да разгръщат новите промени в различни среди. Контейнерите също така изолират приложенията едно от друго в споделена операционна система. Приложения се изпълняват върху хостът на контейнерите. Друго предимство на контейнеризацията е мащабируемостта. Разшираването става бързо:Създават се нови контейнери за краткосрочни задачи. От гледна точка на приложението, инстанцирането на изображение (създаването на контейнер) е подобно на инстанциране на процес като услуга или уеб приложение. Контейнерите предлагат предимствата на изолация, преносимост, гъвкавост, мащабируемост и контрол в целия жизнения цикъл на приложението. 

Docker е проект с отворен код за автоматизиране на внедряването на приложения като преносими, самодостатъчни контейнери, които могат да работят локално или в облака. Docker също е компания, която популяризира и развива тази технология. Docker контейнерите могат да работят върху Linux или Windows.

Виртуалните машини включват приложението, необходимите библиотеки или двоични файлове и пълна операционна система за гости. Изисква пълна виртуализация повече ресурси, отколкото контейнеризация.

Виртуалните машини имат три основни слоя: инфраструктура, хост, операционна система, хипервизор и всички необходими библиотеки. За Docker слоерете са инфраструктурата, ОС и двигател за контейнери, който поддържа изолация, но споделя основните услуги на ОС. Тъй като контейнерите изискват много по-малко ресурси (например не се нуждаят от пълна ОС), те са лесни за изпълнение, внедраване и започват бързо. Основната цел на изображението е да направи зависимостите еднакви в различните среди. Това гарантирана еднакво поведение на всички среди.

