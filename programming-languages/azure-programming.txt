1. Въведение

За кратко време облачните технологии се превърнаха в водеща тенденция в софтуерната индустрия. Това е нов начин
по който да мислим за изграждане на големи, сложни системи, подход, който се възползва изцяло от съвременните
практики за разработка на софтуер, технологии и облачна инфраструктура. Подходът променя
начина, по който проектираме, интегрираме и внедряваме системите.

Системите, базирани на облак, са проектирани да приемат бързи промени, да обслужват голям мащаб от хора и да бъдат устойчиви на всякакъв вид натоварване или хакерски атаки.
Cloud Native Computing Foundation предоставя официално определение:
Технологиите, базирани на облак, дават възможност на организациите да създават и изпълняват мащабируеми приложения в модерни,
динамични среди като публични, частни и хибридни облаци. Контейнери, мрежи от услугу и микроуслуги.
Тези техники позволяват слабо свързани системи, които са устойчиви, управляеми и наблюдаеми.
В комбинация със стабилна автоматизация, те позволяват на инженерите да правят често промени с голямо въздействие и
предвидимо с минимални усилия.
Приложенията стават все по-сложни, като потребителите изискват все повече и повече. Потребителите очакват
бърза реакция, иновативни функции и нулев престой. Проблеми с производителността, повтарящи се
грешки и невъзможността за бързо движение вече не са приемливи. Те лесно ще се преместят при вашия конкурент.
Cloud native е свързан с бързина и пъргавина. Бизнес системите се развиват от позволяващи бизнеса
способности да бъдат оръжия за стратегическа трансформация, които ускоряват бизнес скоростта и
растеж. Наложително е идеите да бъдат пуснати на пазара незабавно.
Ето някои компании, които са приложили тези техники. Помислете за скоростта, ловкостта,
и мащабируемост, която са постигнали.

Фирмен опит
Netflix има 600+ услуги в производство. Разгръща се сто пъти на ден.
Uber има 1000+ услуги в производството. Разгръща се няколко хиляди пъти всяка седмица.
WeChat има 3000+ услуги в производство. Разгръща се 1000 пъти на ден.
Както можете да видите, Netflix, Uber и WeChat разкриват системи, които се състоят от стотици независими
микроуслуги. Този архитектурен стил им позволява бързо да реагират на пазарните условия. Те могат
незабавно актуализирайте малки области на активно, сложно приложение и индивидуално мащабирайте тези области като
необходими.
Скоростта и пъргавината на облачния носител се дължат на редица фактори. На първо място е облакът
инфраструктура. Пет допълнителни фундаментни стълба, показани на фигура 1-3, също осигуряват основата за
облачни системи.

Критични съображения при проектирането
Освен насоките, предоставени от дванадесетфакторната методология, има няколко критични дизайна
решения, които трябва да вземете при конструирането на разпределени системи.
Комуникация
Как клиентските приложения от предния край ще комуникират с базовите услуги в задния край? ще позволиш ли
директна комуникация? Или можете да абстрахирате бек-енд услугите с фасада на шлюза, която
осигурява гъвкавост, контрол и сигурност?
Как ще комуникират помежду си бек-енд основните услуги? Ще разрешите ли директни HTTP повиквания това
водят до сцепление и ударна производителност и пъргавина? Или може да помислите за отделени съобщения
с технологии за опашки и теми?
Комуникацията е разгледана подробно Глава 4, Облачни комуникационни модели.

Издръжливост
Архитектурата на микросервизи премества вашата система от мрежа в процес към мрежа извън процес
комуникация. В разпределена архитектура какво се случва, когато услуга Б не отговаря на a
мрежово обаждане от услуга А? Или какво се случва, когато услуга C стане временно недостъпна и
други услуги, които го извикват, са блокирани?
Устойчивостта е разгледана подробно в Глава 6, Устойчивост в облак.
Разпределени данни
По дизайн всяка микросервис капсулира свои собствени данни, излагайки операциите чрез своя публичен интерфейс. Ако
И така, как да заявявате данни или да прилагате транзакция в множество услуги?
Разпределените данни са обхванати подробно в Глава 5, Облачни модели на данни.
самоличност
Как вашата услуга ще идентифицира кой има достъп до нея и какви разрешения има?
Идентичността е разгледана подробно Глава 8, Идентичност.

Microsoft, в партньорство с водещи експерти от общността, създадоха пълнофункционален облачен продукт
референтно приложение за микросервизи, eShopOnContainers. Това приложение е създадено, за да демонстрира използването
.NET и Docker и по избор Azure, Kubernetes и Visual Studio, за да се създаде онлайн магазин.

Характеристики и изисквания
Нека започнем с преглед на функциите и изискванията на приложението. eShopOnContainers
приложението представлява онлайн магазин, който продава различни физически продукти като тениски и кафе
чаши. Ако сте купували нещо онлайн преди, опитът от използването на магазина трябва да бъде относителен
познат. Ето някои от основните функции, които магазинът прилага:
• Избройте каталожни артикули
• Филтрирайте елементите по тип
• Филтрирайте артикулите по марка
• Добавете артикули в кошницата за пазаруване
• Редактиране или премахване на артикули от кошницата
• Разгледайте
• Регистрирайте акаунт
• Впиши се
• Отписване
• Прегледайте поръчките
Приложението има и следните нефункционални изисквания:
• Трябва да е високодостъпен и да се мащабира автоматично, за да отговори на увеличения трафик (и
намалете мащаба, след като трафикът спадне).
• Той трябва да осигурява лесен за използване мониторинг на неговото здраве и диагностични дневници, за да помогне за отстраняване на неизправности
всякакви проблеми, които среща.
• Трябва да поддържа гъвкав процес на развитие, включително подкрепа за непрекъсната интеграция
и внедряване (CI/CD).
• В допълнение към двата уеб интерфейса (традиционно и едностранично приложение), приложението
трябва също да поддържат мобилни клиентски приложения, работещи с различни видове операционни системи.
• Трябва да поддържа междуплатформен хостинг и кросплатформено развитие.

Приложението eShopOnContainers е достъпно от уеб или мобилни клиенти, които имат достъп до
приложение през HTTPS, насочено към сървърното приложение ASP.NET Core MVC или подходящо
API шлюз. API шлюзовете предлагат няколко предимства, като например отделяне на бек-енд услуги от
индивидуални предни клиенти и осигуряване на по-добра сигурност. Приложението също така използва свързан
модел, известен като Backends-for-Frontends (BFF), който препоръчва създаването на отделни API шлюзове
за всеки преден клиент. Референтната архитектура демонстрира разбиване на API шлюзовете
въз основа на това дали заявката идва от уеб или мобилен клиент.
Функционалността на приложението е разделена на много отделни микроуслуги. Има услуги
отговаря за удостоверяването и самоличността, изброяване на артикули от продуктовия каталог, управление на потребителите
пазарски кошници и пускане на поръчки. Всяка от тези отделни услуги има свое собствено постоянно съхранение.
Няма единно хранилище за основни данни, с което всички услуги взаимодействат. Вместо това координацията и
комуникацията между услугите се извършва при необходимост и чрез използване на шина за съобщения.
Всяка от различните микроуслуги е проектирана по различен начин, въз основа на техните индивидуални изисквания. Това
аспект означава, че техният технологичен стек може да се различава, въпреки че всички те са изградени с помощта на .NET и предназначени за
Облакът. По-простите услуги осигуряват основен достъп до Създаване-Прочетете-Актуализиране-Изтриване (CRUD) до
хранилища на данни, докато по-напредналите услуги използват подходи и модели, управлявани от домейн, за
управлява сложността на бизнеса.


1. Подходи за дизайн на системата
1.1. Онлайн магазин структуриран като монолитно приложение

<----
Вие създавате голямо основно приложение, съдържащо цялата логика на вашия домейн. Включва модули като
Идентичност, каталог, поръчка и др. Основното приложение комуникира с голяма релационна база данни.
Ядрото разкрива функционалност чрез HTML интерфейс.
Честито! Току-що създадохте монолитно приложение.
Не всичко е лошо. Монолитите предлагат някои отличителни предимства. Например, те са лесни за...
• изграждане
• тест
• разгръщане
• отстраняване на неизправности
• мащаб
Много успешни приложения, които съществуват днес, са създадени като монолити. Приложението е хит и продължава да бъде
развиват се, итерация след итерация, добавяйки повече функционалност.
В един момент обаче започвате да се чувствате неудобно. Откривате, че губите контрол над
приложение. С течение на времето чувството става по-интензивно и в крайна сметка влизате в състояние
известен като цикъла на страха.
• Приложението стана толкова невероятно сложно, че нито един човек не го разбира.
• Страхувате се да правите промени – всяка промяна има нежелани и скъпи странични ефекти.
• Новите функции/поправки стават трудни, отнемащи време и скъпи за прилагане.
• Всяка версия е възможно най-малка и изисква пълно разгръщане на цялото приложение.
• Един нестабилен компонент може да срине цялата система.
• Новите технологии и рамки не са опция.
• Трудно е да се прилагат гъвкави методологии за доставка.
• Архитектурната ерозия настъпва, тъй като кодовата база се влошава с безкрайни „специални случаи“.
• Консултантите ви казват да го пренапишете.
Много организации са се справили с монолитния цикъл на страх, като са възприели облачен подход към
сградни системи. Фигура 1-2 показва същата система, изградена с прилагане на облачни техники и
практики.
------->

Вие създавате голямо основно приложение, съдържащо цялата логика на вашия домейн. Включва модули като
Идентичност, каталог, поръчка и др. Основното приложение комуникира с голяма релационна база данни.
Ядрото разкрива функционалност чрез HTML интерфейс.
Честито! Току-що създадохте монолитно приложение.
Не всичко е лошо. Монолитите предлагат някои отличителни предимства. Например, те са лесни за...
• изграждане
2 ГЛАВА 1 | Въведение в облачните приложения
• тест
• разгръщане
• отстраняване на неизправности
• мащаб
Много успешни приложения, които съществуват днес, са създадени като монолити. Приложението е хит и продължава да бъде
развиват се, итерация след итерация, добавяйки повече функционалност.
В един момент обаче започвате да се чувствате неудобно. Откривате, че губите контрол над
приложение. С течение на времето чувството става по-интензивно и в крайна сметка влизате в състояние
известен като цикъла на страха.
• Приложението стана толкова невероятно сложно, че нито един човек не го разбира.
• Страхувате се да правите промени – всяка промяна има нежелани и скъпи странични ефекти.
• Новите функции/поправки стават трудни, отнемащи време и скъпи за прилагане.
• Всяка версия е възможно най-малка и изисква пълно разгръщане на цялото приложение.
• Един нестабилен компонент може да срине цялата система.
• Новите технологии и рамки не са опция.
• Трудно е да се прилагат гъвкави методологии за доставка.
• Архитектурната ерозия настъпва, тъй като кодовата база се влошава с безкрайни „специални случаи“.
• Консултантите ви казват да го пренапишете.
Много организации са се справили с монолитния цикъл на страх, като са възприели облачен подход към
сградни системи. Фигура 1-2 показва същата система, изградена с прилагане на облачни техники и
практики. ...


В сценарий на един проект разделянето на проблемите се постига чрез използването на папки. По подразбиране
шаблонът включва отделни папки за отговорности за MVC шаблон на модели, изгледи и контролери,
както и допълнителни папки за данни и услуги. При това подреждане трябва да има подробности за представянето
ограничени доколкото е възможно до папката Views и подробностите за внедряването на достъп до данни трябва да бъдат
ограничено до класове, съхранявани в папката Data. Бизнес логиката трябва да се намира в услугите и класовете вътре
папката Models.
Макар и просто, монолитното решение за един проект има някои недостатъци. Като размер на проекта
и сложността нараства, броят на файловете и папките също ще продължи да расте. Потребителски интерфейс (UI)
проблемите (модели, изгледи, контролери) се намират в множество папки, които не са групирани заедно
по азбучен ред. Този проблем се влошава само при допълнителни конструкции на ниво потребителски интерфейс, като филтри или
ModelBinders, се добавят в техните собствени папки. Бизнес логиката е разпръсната между Моделите и
папки на услуги и няма ясна индикация от кои класове в кои папки трябва да зависят
които други. Тази липса на организация на ниво проект често води до код за спагети.
За да се справят с тези проблеми, приложенията често се развиват в многопроектни решения, където е всеки проект
счита се, че се намира в определен слой на приложението.
Какво представляват слоевете?
С нарастването на сложността на приложенията един от начините за управление на тази сложност е да разбиете приложението
според неговите отговорности или притеснения. Този подход следва разделянето на притесненията
принцип и може да помогне за поддържане на нарастващата кодова база организирана, така че разработчиците да могат лесно да намерят къде
е реализирана определена функционалност. Многослойната архитектура предлага редица предимства извън простото
организация на кода обаче.
17 ГЛАВА 4 | Често срещани архитектури на уеб приложения
Чрез организиране на кода в слоеве, общата функционалност на ниско ниво може да бъде използвана повторно навсякъде
приложение. Тази повторна употреба е от полза, защото означава, че трябва да се пише по-малко код и защото може
позволете на приложението да се стандартизира за една реализация, следвайки инструкциите не се повтаряйте
(СУХ) принцип.
С многослойна архитектура приложенията могат да налагат ограничения за това кои слоеве могат да комуникират
с други слоеве. Тази архитектура помага за постигане на капсулиране. При смяна на слой или
подменен, трябва да бъдат засегнати само онези слоеве, които работят с него. Чрез ограничаване на кои слоеве зависят
кои други слоеве, въздействието на промените може да бъде смекчено, така че една промяна да не повлияе на
цялото приложение.
Слоевете (и капсулирането) правят много по-лесно замяната на функционалността в рамките на приложението. За
Например, едно приложение може първоначално да използва своя собствена база данни на SQL Server за постоянство, но по-късно може
изберете да използвате базирана на облак стратегия за постоянство или такава зад уеб API. Ако приложението има
правилно капсулира своята постоянна реализация в логически слой, който е специфичен за SQL Server
слой може да бъде заменен с нов, който реализира същия публичен интерфейс.
В допълнение към потенциала за размяна на имплементации в отговор на бъдещи промени в
изискванията, приложните слоеве могат също да улеснят размяната на реализации за тестване
цели. Вместо да се налага да пишете тестове, които работят срещу реалния слой данни или слоя на потребителския интерфейс на
приложение, тези слоеве могат да бъдат заменени по време на тестване с фалшиви реализации, които предоставят известни
отговори на искания. Този подход обикновено прави тестовете много по-лесни за писане и много по-бързи
изпълнява в сравнение с провеждането на тестове срещу реалната инфраструктура на приложението.
Логическото наслояване е често срещана техника за подобряване на организацията на кода в корпоративния софтуер
приложения и има няколко начина, по които кодът може да бъде организиран на слоеве.


1.2  Онлайн магазин ориентиран към услуги

Микроуслуги
Системите, базирани на облак, включват микроуслуги, популярен архитектурен стил за изграждане на модерни
приложения.
Създаден като разпределен набор от малки, независими услуги, които взаимодействат чрез споделена тъкан,
микроуслугите споделят следните характеристики:
• Всеки реализира специфична бизнес способност в рамките на по-голям контекст на домейн.
• Всеки от тях се разработва автономно и може да бъде разгърнат независимо.
• Всеки е самостоятелен, като капсулира своя собствена технология за съхранение на данни (SQL, NoSQL) и
платформа за програмиране.
• Всеки работи в свой собствен процес и комуникира с другите, използвайки стандартна комуникация
протоколи като HTTP/HTTPS, WebSockets или AMQP.
• Те се съставят заедно, за да образуват приложение.
Фигура 1-4 контрастира подхода на монолитното приложение с подхода на микроуслугите. Забележете как
monolith се състои от многопластова архитектура, която се изпълнява в един процес. Обикновено
консумира релационна база данни. Подходът на микросервизите обаче разделя функционалността на
независими услуги, които включват логика и данни. Всяка микросервис хоства свое собствено хранилище за данни.

Обърнете внимание как микроуслугите насърчават принципа „Една кодова база, едно приложение“ от приложението TwelveFactor, обсъдено по-рано в тази глава.
Фактор №1 определя „Единична кодова база за всяка микроуслуга, съхранявана в собственото си хранилище. Проследено с
контрол на версиите, той може да се разгръща в множество среди."
Защо микроуслуги?
Микроуслугите осигуряват гъвкавост.
По-рано в главата сравнихме едно приложение за електронна търговия, изградено като монолит, с това с
микроуслуги. В примера видяхме някои ясни предимства:
• Всяка микроуслуга има автономен жизнен цикъл и може да се развива независимо и да се разгръща
често. Не е нужно да чакате тримесечна версия, за да внедрите нови функции или актуализация.
Можете да актуализирате малка област от сложно приложение с по-малък риск от нарушаване на цялото
система.
• Всяка микросервис може да се мащабира независимо. Вместо да мащабирате цялото приложение като единично
единица, вие мащабирате само онези услуги, които изискват повече процесорна мощност или мрежа
честотна лента. Този фин подход към мащабирането осигурява по-голям контрол на вашата система
и помага за намаляване на общите разходи, докато мащабирате части от вашата система, а не всичко.
Отличен справочник за разбиране на микроуслугите е .NET Microservices: Архитектура за
Контейнерни .NET приложения. Книгата се потапя дълбоко в дизайна и архитектурата на микросервизите. е
придружител за референтна архитектура на микросервизи с пълен стек, достъпна за безплатно изтегляне от
Microsoft.
Разработване на микросервизи
Микросервизите могат да бъдат създадени с всяка модерна платформа за разработка.


Платформата на Microsoft .NET е отличен избор. Безплатен и с отворен код, той има много вградени функции
за опростяване на разработването на микросервизи. .NET е кросплатформен. Приложенията могат да се изграждат и изпълняват
Windows, macOS и повечето разновидности на Linux.
.NET е с висока производителност и има добри резултати в сравнение с Node.js и други конкурентни
платформи. Интересното е, че TechEmpower проведе широк набор от показатели за производителност
много платформи и рамки за уеб приложения. .NET отбеляза в топ 10 - доста над Node.js и
други конкурентни платформи.
.NET се поддържа от Microsoft и .NET общността в GitHub.
Контейнери
В днешно време е естествено да чуете термина контейнер, споменат във всеки разговор относно облака
местен. В книгата, Cloud Native Patterns, авторът Корнелия Дейвис отбелязва, че „Контейнерите са страхотно
активатор на облачен софтуер." Cloud Native Computing Foundation поставя микроуслуги
контейнеризация като първа стъпка в тяхната Cloud-Native Trail Map - насоки за начинаещи предприятия
тяхното пътуване в облака.
Контейнеризирането на микроуслуга е просто и лесно. Кодът, неговите зависимости и време на изпълнение
са пакетирани в двоичен файл, наречен изображение на контейнер. Изображенията се съхраняват в регистър на контейнери, който
действа като хранилище или библиотека за изображения. Регистър може да бъде разположен на вашия компютър за разработка, в
вашия център за данни или в публичен облак. Самият Docker поддържа публичен регистър чрез Docker Hub. В
Azure cloud разполага с регистър на контейнери за съхраняване на изображения на контейнери близо до облачните приложения
това ще ги управлява.
Когато е необходимо, трансформирате изображението в работещ екземпляр на контейнер. Екземплярът работи на всеки
компютър, който има инсталирана машина за изпълнение на контейнера. Можете да имате толкова много екземпляра на
контейнерна услуга при необходимост.
Фигура 1-5 показва три различни микроуслуги, всяка в собствен контейнер, работещи на един хост.


Сервизно-ориентирана архитектура
Сервизно-ориентираната архитектура (SOA) беше твърде използван термин и означаваше различни неща за различните
хора. Но като общ знаменател, SOA означава, че структурирате приложението си по
разграждането му на множество услуги (най-често като HTTP услуги), които могат да бъдат класифицирани като
различни типове като подсистеми или нива.
Тези услуги вече могат да бъдат разгърнати като Docker контейнери, което решава проблемите с внедряването, т.к
всички зависимости са включени в изображението на контейнера. Въпреки това, когато трябва да увеличите SOA
приложения, може да имате проблеми с мащабируемостта и наличността, ако внедрявате на базата на single
Докер хостове. Това е мястото, където софтуерът за клъстериране на Docker или оркестраторът може да ви помогне, както е обяснено в
по-късни раздели, където са описани подходи за разгръщане на микроуслуги.
Docker контейнерите са полезни (но не са задължителни) както за традиционните ориентирани към услуги архитектури, така и за
по-модерните архитектури на микросервизи.
Микроуслугите произлизат от SOA, но SOA е различна от архитектурата на микроуслугите. Характеристики като
големи централни брокери, централни оркестратори на ниво организация и Enterprise Service Bus
(ESB) са типични за SOA. Но в повечето случаи това са анти-шаблони в общността на микросервизите. В
Всъщност някои хора твърдят, че „архитектурата на микросервизите е SOA направена правилно.“
Това ръководство се фокусира върху микроуслугите, тъй като SOA подходът е по-малко предписващ от този
изисквания и техники, използвани в архитектурата на микросервизи. Ако знаете как да изградите a
базирано на микроуслуги приложение, вие също знаете как да изградите по-просто ориентирано към услуги приложение.
Архитектура на микросервизи
Както подсказва името, архитектурата на микросервизи е подход за изграждане на сървърно приложение като a
набор от малки услуги. Това означава, че архитектурата на микроуслугите е ориентирана главно към бек-енда,
въпреки че подходът се използва и за предния край. Всяка услуга работи в собствен процес и
комуникира с други процеси, използвайки протоколи като HTTP/HTTPS, WebSockets или AMQP.
Всяка микросервис внедрява специфичен домейн от край до край или бизнес способност в рамките на определен
граница на контекста и всеки трябва да бъде разработен автономно и да може да се разгръща независимо.
И накрая, всяка микроуслуга трябва да притежава свързания модел на данни на домейна и логиката на домейна (суверенитет
26 ГЛАВА 3 | Архитектура на приложения, базирани на контейнери и микросервизи
и децентрализирано управление на данни) и може да се основава на различни технологии за съхранение на данни
(SQL, NoSQL) и различни езици за програмиране.
Какъв размер трябва да бъде микроуслугата? При разработването на микроуслуга размерът не трябва да е важен
точка. Вместо това, важната точка трябва да бъде да създадете слабо свързани услуги, така че да имате
автономия на разработка, внедряване и мащаб за всяка услуга. Разбира се, при идентифициране и
когато проектирате микроуслуги, трябва да се опитате да ги направите възможно най-малки, стига да нямате
твърде много директни зависимости с други микроуслуги. По-важно от размера на
микроуслугата е вътрешната сплотеност, която трябва да има, и нейната независимост от други услуги.
Защо архитектура на микросервизи? Накратко, осигурява дългосрочна пъргавина. Микроуслугите позволяват по-добре
поддръжка в сложни, големи и силно мащабируеми системи, като ви позволява да създавате базирани на приложения
на много независимо разгръщащи се услуги, всяка от които има детайлен и автономен жизнен цикъл.
Като допълнително предимство, микроуслугите могат да се мащабират независимо. Вместо да има сингъл
монолитно приложение, което трябва да мащабирате като единица, вместо това можете да мащабирате конкретно
микроуслуги. По този начин можете да мащабирате само функционалната област, която се нуждае от повече процесорна мощност или
мрежовата честотна лента, за да се поддържа търсенето, вместо да се мащабират други области на приложението, които
не е необходимо да се мащабират. Това означава спестяване на разходи, защото имате нужда от по-малко хардуер.

Както показва Фигура 4-6, при традиционния монолитен подход приложението се мащабира чрез клониране на
цяло приложение в няколко сървъра/VM. При подхода на микроуслугите функционалността е разделена на по-малки
услуги, така че всяка услуга може да се мащабира независимо. Подходът на микроуслугите позволява гъвкави промени
и бърза итерация на всяка микроуслуга, защото можете да промените специфични, малки области на комплекса,
големи и мащабируеми приложения.
Архитектурата на фино-зърнести приложения, базирани на микросервизи, позволява непрекъсната интеграция и
непрекъснати практики за доставка. Освен това ускорява доставянето на нови функции в приложението. Подробният състав на приложенията също ви позволява да изпълнявате и тествате микроуслуги изолирано и да
27 ГЛАВА 3 | Архитектура на приложения, базирани на контейнери и микросервизи
развивайте ги автономно, като същевременно поддържате ясни договори между тях. стига да не го направите
промените интерфейсите или договорите, можете да промените вътрешната реализация на всяка микроуслуга или
добавете нова функционалност, без да нарушавате други микроуслуги.
Следните са важни аспекти, които позволяват успех при навлизането в производство с базирана на микроуслуги система:
• Мониторинг и здравни проверки на услугите и инфраструктурата.
• Мащабируема инфраструктура за услугите (тоест облак и оркестратори).
• Проектиране и внедряване на сигурността на множество нива: удостоверяване, оторизация, тайни
управление, сигурна комуникация и др.
• Бърза доставка на приложения, обикновено с различни екипи, фокусирани върху различни микроуслуги.
• DevOps и CI/CD практики и инфраструктура.
От тях само първите три са обхванати или представени в това ръководство. Последните две точки, които са
свързани с жизнения цикъл на приложението, са обхванати в допълнителното Containerized Docker приложение
Жизнен цикъл с електронна книга с платформа и инструменти на Microsoft.


