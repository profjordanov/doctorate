1. Въведение

За кратко време облачните технологии се превърнаха в водеща тенденция в софтуерната индустрия. Това е нов начин
по който да мислим за изграждане на големи, сложни системи, подход, който се възползва изцяло от съвременните
практики за разработка на софтуер, технологии и облачна инфраструктура. Подходът променя
начина, по който проектираме, интегрираме и внедряваме системите.

Системите, базирани на облак, са проектирани да приемат бързи промени, да обслужват голям мащаб от хора и да бъдат устойчиви на всякакъв вид натоварване или хакерски атаки.
Cloud Native Computing Foundation предоставя официално определение:
Технологиите, базирани на облак, дават възможност на организациите да създават и изпълняват мащабируеми приложения в модерни,
динамични среди като публични, частни и хибридни облаци. Контейнери, мрежи от услугу и микроуслуги.
Тези техники позволяват слабо свързани системи, които са устойчиви, управляеми и наблюдаеми.
В комбинация със стабилна автоматизация, те позволяват на инженерите да правят често промени с голямо въздействие и
предвидимо с минимални усилия.
Приложенията стават все по-сложни, като потребителите изискват все повече и повече. Потребителите очакват
бърза реакция, иновативни функции и нулев престой. Проблеми с производителността, повтарящи се
грешки и невъзможността за бързо движение вече не са приемливи. Те лесно ще се преместят при вашия конкурент.
Cloud native е свързан с бързина и пъргавина. Бизнес системите се развиват от позволяващи бизнеса
способности да бъдат оръжия за стратегическа трансформация, които ускоряват бизнес скоростта и
растеж. Наложително е идеите да бъдат пуснати на пазара незабавно.
Ето някои компании, които са приложили тези техники. Помислете за скоростта, ловкостта,
и мащабируемост, която са постигнали.

Фирмен опит
Netflix има 600+ услуги в производство. Разгръща се сто пъти на ден.
Uber има 1000+ услуги в производството. Разгръща се няколко хиляди пъти всяка седмица.
WeChat има 3000+ услуги в производство. Разгръща се 1000 пъти на ден.
Както можете да видите, Netflix, Uber и WeChat разкриват системи, които се състоят от стотици независими
микроуслуги. Този архитектурен стил им позволява бързо да реагират на пазарните условия. Те могат
незабавно актуализирайте малки области на активно, сложно приложение и индивидуално мащабирайте тези области като
необходими.
Скоростта и пъргавината на облачния носител се дължат на редица фактори. На първо място е облакът
инфраструктура. Пет допълнителни фундаментни стълба, показани на фигура 1-3, също осигуряват основата за
облачни системи.

Критични съображения при проектирането
Освен насоките, предоставени от дванадесетфакторната методология, има няколко критични дизайна
решения, които трябва да вземете при конструирането на разпределени системи.
Комуникация
Как клиентските приложения от предния край ще комуникират с базовите услуги в задния край? ще позволиш ли
директна комуникация? Или можете да абстрахирате бек-енд услугите с фасада на шлюза, която
осигурява гъвкавост, контрол и сигурност?
Как ще комуникират помежду си бек-енд основните услуги? Ще разрешите ли директни HTTP повиквания това
водят до сцепление и ударна производителност и пъргавина? Или може да помислите за отделени съобщения
с технологии за опашки и теми?
Комуникацията е разгледана подробно Глава 4, Облачни комуникационни модели.

Издръжливост
Архитектурата на микросервизи премества вашата система от мрежа в процес към мрежа извън процес
комуникация. В разпределена архитектура какво се случва, когато услуга Б не отговаря на a
мрежово обаждане от услуга А? Или какво се случва, когато услуга C стане временно недостъпна и
други услуги, които го извикват, са блокирани?
Устойчивостта е разгледана подробно в Глава 6, Устойчивост в облак.
Разпределени данни
По дизайн всяка микросервис капсулира свои собствени данни, излагайки операциите чрез своя публичен интерфейс. Ако
И така, как да заявявате данни или да прилагате транзакция в множество услуги?
Разпределените данни са обхванати подробно в Глава 5, Облачни модели на данни.
самоличност
Как вашата услуга ще идентифицира кой има достъп до нея и какви разрешения има?
Идентичността е разгледана подробно Глава 8, Идентичност.

Microsoft, в партньорство с водещи експерти от общността, създадоха пълнофункционален облачен продукт
референтно приложение за микросервизи, eShopOnContainers. Това приложение е създадено, за да демонстрира използването
.NET и Docker и по избор Azure, Kubernetes и Visual Studio, за да се създаде онлайн магазин.

Характеристики и изисквания
Нека започнем с преглед на функциите и изискванията на приложението. eShopOnContainers
приложението представлява онлайн магазин, който продава различни физически продукти като тениски и кафе
чаши. Ако сте купували нещо онлайн преди, опитът от използването на магазина трябва да бъде относителен
познат. Ето някои от основните функции, които магазинът прилага:
• Избройте каталожни артикули
• Филтрирайте елементите по тип
• Филтрирайте артикулите по марка
• Добавете артикули в кошницата за пазаруване
• Редактиране или премахване на артикули от кошницата
• Разгледайте
• Регистрирайте акаунт
• Впиши се
• Отписване
• Прегледайте поръчките
Приложението има и следните нефункционални изисквания:
• Трябва да е високодостъпен и да се мащабира автоматично, за да отговори на увеличения трафик (и
намалете мащаба, след като трафикът спадне).
• Той трябва да осигурява лесен за използване мониторинг на неговото здраве и диагностични дневници, за да помогне за отстраняване на неизправности
всякакви проблеми, които среща.
• Трябва да поддържа гъвкав процес на развитие, включително подкрепа за непрекъсната интеграция
и внедряване (CI/CD).
• В допълнение към двата уеб интерфейса (традиционно и едностранично приложение), приложението
трябва също да поддържат мобилни клиентски приложения, работещи с различни видове операционни системи.
• Трябва да поддържа междуплатформен хостинг и кросплатформено развитие.

Приложението eShopOnContainers е достъпно от уеб или мобилни клиенти, които имат достъп до
приложение през HTTPS, насочено към сървърното приложение ASP.NET Core MVC или подходящо
API шлюз. API шлюзовете предлагат няколко предимства, като например отделяне на бек-енд услуги от
индивидуални предни клиенти и осигуряване на по-добра сигурност. Приложението също така използва свързан
модел, известен като Backends-for-Frontends (BFF), който препоръчва създаването на отделни API шлюзове
за всеки преден клиент. Референтната архитектура демонстрира разбиване на API шлюзовете
въз основа на това дали заявката идва от уеб или мобилен клиент.
Функционалността на приложението е разделена на много отделни микроуслуги. Има услуги
отговаря за удостоверяването и самоличността, изброяване на артикули от продуктовия каталог, управление на потребителите
пазарски кошници и пускане на поръчки. Всяка от тези отделни услуги има свое собствено постоянно съхранение.
Няма единно хранилище за основни данни, с което всички услуги взаимодействат. Вместо това координацията и
комуникацията между услугите се извършва при необходимост и чрез използване на шина за съобщения.
Всяка от различните микроуслуги е проектирана по различен начин, въз основа на техните индивидуални изисквания. Това
аспект означава, че техният технологичен стек може да се различава, въпреки че всички те са изградени с помощта на .NET и предназначени за
Облакът. По-простите услуги осигуряват основен достъп до Създаване-Прочетете-Актуализиране-Изтриване (CRUD) до
хранилища на данни, докато по-напредналите услуги използват подходи и модели, управлявани от домейн, за
управлява сложността на бизнеса.


1. Подходи за дизайн на системата
1.1. Онлайн магазин структуриран като монолитно приложение

<----
Вие създавате голямо основно приложение, съдържащо цялата логика на вашия домейн. Включва модули като
Идентичност, каталог, поръчка и др. Основното приложение комуникира с голяма релационна база данни.
Ядрото разкрива функционалност чрез HTML интерфейс.
Честито! Току-що създадохте монолитно приложение.
Не всичко е лошо. Монолитите предлагат някои отличителни предимства. Например, те са лесни за...
• изграждане
• тест
• разгръщане
• отстраняване на неизправности
• мащаб
Много успешни приложения, които съществуват днес, са създадени като монолити. Приложението е хит и продължава да бъде
развиват се, итерация след итерация, добавяйки повече функционалност.
В един момент обаче започвате да се чувствате неудобно. Откривате, че губите контрол над
приложение. С течение на времето чувството става по-интензивно и в крайна сметка влизате в състояние
известен като цикъла на страха.
• Приложението стана толкова невероятно сложно, че нито един човек не го разбира.
• Страхувате се да правите промени – всяка промяна има нежелани и скъпи странични ефекти.
• Новите функции/поправки стават трудни, отнемащи време и скъпи за прилагане.
• Всяка версия е възможно най-малка и изисква пълно разгръщане на цялото приложение.
• Един нестабилен компонент може да срине цялата система.
• Новите технологии и рамки не са опция.
• Трудно е да се прилагат гъвкави методологии за доставка.
• Архитектурната ерозия настъпва, тъй като кодовата база се влошава с безкрайни „специални случаи“.
• Консултантите ви казват да го пренапишете.
Много организации са се справили с монолитния цикъл на страх, като са възприели облачен подход към
сградни системи. Фигура 1-2 показва същата система, изградена с прилагане на облачни техники и
практики.
------->

Вие създавате голямо основно приложение, съдържащо цялата логика на вашия домейн. Включва модули като
Идентичност, каталог, поръчка и др. Основното приложение комуникира с голяма релационна база данни.
Ядрото разкрива функционалност чрез HTML интерфейс.
Честито! Току-що създадохте монолитно приложение.
Не всичко е лошо. Монолитите предлагат някои отличителни предимства. Например, те са лесни за...
• изграждане
2 ГЛАВА 1 | Въведение в облачните приложения
• тест
• разгръщане
• отстраняване на неизправности
• мащаб
Много успешни приложения, които съществуват днес, са създадени като монолити. Приложението е хит и продължава да бъде
развиват се, итерация след итерация, добавяйки повече функционалност.
В един момент обаче започвате да се чувствате неудобно. Откривате, че губите контрол над
приложение. С течение на времето чувството става по-интензивно и в крайна сметка влизате в състояние
известен като цикъла на страха.
• Приложението стана толкова невероятно сложно, че нито един човек не го разбира.
• Страхувате се да правите промени – всяка промяна има нежелани и скъпи странични ефекти.
• Новите функции/поправки стават трудни, отнемащи време и скъпи за прилагане.
• Всяка версия е възможно най-малка и изисква пълно разгръщане на цялото приложение.
• Един нестабилен компонент може да срине цялата система.
• Новите технологии и рамки не са опция.
• Трудно е да се прилагат гъвкави методологии за доставка.
• Архитектурната ерозия настъпва, тъй като кодовата база се влошава с безкрайни „специални случаи“.
• Консултантите ви казват да го пренапишете.
Много организации са се справили с монолитния цикъл на страх, като са възприели облачен подход към
сградни системи. Фигура 1-2 показва същата система, изградена с прилагане на облачни техники и
практики. ...




