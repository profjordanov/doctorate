Въведение

За кратко време облачните технологии се превърнаха в водеща тенденция в софтуерната индустрия. Те представят нов начин за изграждаме големи, сложни системи. Подход, който се възползва изцяло от съвременните практики за разработка на високо-качествен софтуер и инфраструктура.  Предлага промени в начина, по който проектираме, интегрираме и внедряваме системите. Облачно базираните решения са проектирани да приемат бързо промените, да обслужват голям мащаб от хора и да бъдат устойчиви на всякакъв вид натоварване или хакерски атаки. 

Cloud Native Computing Foundation  предоставя официално определение:
Технологиите, базирани на облак, дават възможност на организациите да създават и изпълняват приложения в модерни, динамични среди като публични, частни и хибридни облаци, чрез мрежи от услуги и микроуслуги. Качества на системите са устойчивост, висока наличност и достъпност, мащабируемост и управляемост, които са от критично значение за много от бизнес единиците. Автоматизацията на тези процеси позволява на инженерите да правят промени, с голямо въздействие, но с минимални усилия. 

Приложенията стават все по-сложни, като изискванията от потребителите са все повече и повече, главно насочени към бърза реакция, иновативни функции и нулев застой. Проблеми с производителността или повтарящи се грешки вече не са приемливи. Тези предимства поставят бизнеса на една стъпка пред конкурентите. Облачно базираните системи се свързват главно с бързина. Бизнес системите се развиват от способностите на бизнеса да бъдат инструменти за стратегическа трансформация, която ускорява растежа на компанията. Незабавното пускане на иновативните идеи на пазара е важна тема за всички модерни  компании. Нека разгледаме два технологични компании, които са приложили тези техники:

- Netflix има над 600 услуги в производствена среда. Стотици пъти на ден се изпълняват нови внедрявания и разгръщания на съществуващи.
- Uber  има над 1000 услуги в производствена среда. Разгръщат се няколко хиляди пъти всяка седмица.

Както може да видим тези две компании са базирани на системи, които се състоят от стотици независими микроуслуги. Този архитектурен стил им позволява бързо да реагират на пазарните условия като постоянно да актуализират малки, но важни области. Скоростта и пъргавината на облачния носител се дължат на редица фактори, като на първо място е инфраструктурата на изчислителните ресурси. 

По примери и указания на водещи експерти от общността, нека разгледаме характеристики и изисквания на функционален облачен продукт, демонстриращ използването на .NET, Docker, Kubernetes в облачната среда на Microsoft Azure за осъществяването семпъл онлайн магазин. Ето някои от основните системни изисквания , които магазинът има:
• Колекция от артикули, между които може да се избира определен
• Филтриране на елементите по тип
• Филтриране на артикулите по марка
• Добавяне на артикули в кошницата за пазаруване
• Промяна или премахване на артикули от кошницата
• Разглеждане на детайлите за определен елемент
• Регистриране на акаунт
• Вписване на потребител
• Отписване на потребител
• Преглеждане на текущите поръчки
Приложението има и следните нефункционални изисквания :
•  Трябва да е високо-достъпно и да може автоматично да разширява мащаба, за да отговори на увеличаващия се трафик (също така да намалява мащаба, след като трафикът спадне).
•  Трябва да осигурява лесен за използване мониторинг на състоянието на системните единици и диагностични дневници, за да помогне при отстраняване на неизправности или други проблеми, които възникнат по време на работа.
•  Трябва да поддържа гъвкав процес на развитие, включително подкрепа за непрекъсната интеграция и внедряване (Continuous integration / deployment).
•  Трябва да поддържа уеб интерфейс (традиционно, едностранично и/или мобилно клиентско приложение)
• Трябва да поддържа междуплатформен хостинг и развитие.

1.	Подходи за дизайн на системата
1.1 Монолитна архитектура на приложение за е-търговия 
Повечето традиционни .NET приложения се внедряват като единици, съответстващи на изпълними файлове или казано по друг начин уеб приложения, работещи в рамките на един домейн на IIS сървър. Този подход е най-простият модел за внедряване и обслужва добре много вътрешни и по-малки публични приложения. Това са така наречените монолитни приложения- напълно самостоятелни по отношение на своето поведение. Могат да взаимодействат с други услуги или хранилища на данни в хода на извършване на своите операции, но ядрото на тяхното поведение се изпълнява в рамките на собствен процес и обикновено цялото приложение се разгръща като самостоятелна единица. Ако такова приложение трябва да се мащабира хоризонтално, обикновено то се дублира върху множество сървъри или виртуални машини. Това са приложения от тип „всичко в едно“. В тази архитектура, цялата логика на приложението се съдържа в един проект, компилиран и внедрен като самостоятелна единица. Шаблонът на нов ASP.NET Core проект, независимо дали е създаден във Visual Studio или от командния ред, започва като прост монолит „всичко в едно“. Той съдържа цялото поведение на приложението, включително логика за визуализация, бизнес и достъп до данни. Разделянето на логиката се постига чрез използването на папки. По подразбиране шаблонът включва отделни папки за отговорности на MVC  (модели, изгледи и контролери) както и допълнителни папки за данни и услуги. Макар и просто, монолитното решение за един проект има някои недостатъци: когато размер и сложността на проекта нарастват, броят на файловете и папките също ще продължи да расте. Бизнес логиката е разпръсната между моделите и класовете на услуги без ясна индикация. Тази липса на организация на ниво проект често води до т.н "спагети код" . За да се справят с тези проблеми, приложенията често се развиват в много-проектни решения, където всеки проект отговаря на определен слой на приложението. Чрез организиране на кода в слоеве, общата функционалност на ниско ниво може да бъде пре-използвана. Тази повторна употреба е от полза, защото показва, че трябва да се пише по-малко код и стандартизирането на една реализация.

На фиг. 1 може да видим примерен дизайн на монолитно приложение за електронна търговия. 
Модулите, отговарящи за първоначалните изисквания на приложението са два и те включват:

•	Удостоверяване - процесът на определяне кой има достъп до системата. В уеб-базирано удостоверяване има няколко действия, които трябва да бъдат извършени: изисква от потребителя информация (потребителско име и парола) за да създадете самоличност, която записва в базата данни, вписва текущия клиент в сървърната сесия, използвайки HTTP бисквитки и отписва, като премахне тази информация. Елементите от приложението и зависимости, които ще обслужват тази част са визуализирани на следната фигура 2. DbContext и ApplicationUser представляват комбинация от класове, които оперират с базата от данни.  AccountController използва тези свойствa чрез UsersService, който капсулирана логиката, по безопасен за използване начин, и също така отговаря за визуализацията на потребителския интерфейс, чрез генериране на HTML .

•	Kаталог - поддържа обхождане, добавяне, промяна и премахване маркетингови артикули от базата с данни. Подобно на  предходния модул, осъществяването на спецификацията се случва чрез ProductsController, ProductsService, и т.н. Целта е всички модули да бъдат структурирани и да изглеждат по сходен начин, който да пази добро ниво на абстракция и капсулация на кода, но в същото време да бъде интуитивен и разбираем.

Структурата на папките на приложениео е добре оформена, по следния функционален, управляван от домейн дизайн:

├───eShop
│   ├───src – индикира път към основния код
│   │   ├───eShop.Web - логика за представяне
│   │   ├───eShop.Business – бизнес логиката на приложението
│   │   ├───eShop.Core – експонирани за клиенти модели
│   │   ├───eShop.Domain – вътрешни модели на приложението
│   │   └───eShop.Persistence – логика за достъпа до данните
│   └───tests – индикира път към тестовете на кода
│       └───eShop.Tests – пълен набор от автоматизирани (интеграционни) тестове

Много успешни приложения, които съществуват днес, са създадени като монолити. С течение на времето, обаче, се наблюдават някои слаби точки като:
• Новите промени могат да имат нежелани и скъпи странични ефекти.
• Новите функции стават трудни, отнемащи време и скъпи за прилагане. 
• Всяка версия изисква пълно разгръщане на цялото приложение. 
• Един нестабилен компонент може да срине цялата система.

1.2 Mикросървисна системна архитектура 
За да реши горе описаните, но и много други, проблеми, следва да разгледаме ориентирания към услуги архитектурен стил. Това е подход за изграждане на сървърно приложение като набор от малки, но високо-качествени подуслуги. Съотвено, клиентите, на сървърните услуги, могат да бъдат отделни приложения, които да се поддържат и управляват самостоятелно. Всяка услуга работи в собствен процес и комуникира с други процеси, използвайки различен тип и вид протоколи, HTTP/HTTPS, WebSockets или AMQP. Всеки микросервис притежава специфична бизнес способност, трябва да бъде разработван автономно и да може да се разгръща независимо. Предимства на това архитектурно решение са:

• Всяка микроуслуга може да бъде проектирана, разработена и внедрена независимо една от друга, което осигурява възможно за независима работа по отделни области на приложението.
•  Работата може да бъде дистрибутирана между отделни екипи.
•  Проблемите са по-изолирани.
•  Позволява използването на най-новите технологии.

Тъй като ориентираната към услуги архитектура носи специфични изисквания и сложност, нека разгледаме интеграцията на онлайн магазинът, изграден от микро-услуги, към облачно базирана среда  в следващата глава. 

2.	Модели на подсистемите в онлайн магазина
Като начало на тази част, нека разгледаме фиг.3, която илюстрира как монолитното структурираният модел се превръща в ориентирана към услуги, базирана на облак, система.

Системата е достъпна от уеб или мобилни клиенти, които имат достъп през HTTPS, насочени или към сървърното приложение ASP.NET Core MVC, или към подходящ API шлюз. Функционалността на приложението е разделена на много отделни микроуслуги (надграждащи модулите от монолитния дизайн): удостоверяване и самоличност, управление на потребители, изброяване на артикули от продуктовия каталог, заявяване на поръчки и др. Всяка от тези отделни услуги има свое собствено хранилище за основни данни  . Няма единно хранилище за основни данни, с което всички услуги взаимодействат. Всяка от различните микроуслуги е проектирана по различен начин, въз основа на техните индивидуални изисквания. Azure е много подходящ за поддръжка на така структуриран онлайн магазин, тъй като проектът е създаден да бъде приложение, базирано на облак.
От гледна точка на изходния код, проектът включва доста отделни решения в Git хранилището си. Фигура 4 показва пълното решение на Visual Studio, в което са организирани подпроектите.

API шлюзовете предлагат няколко предимства, като например разпределяне на заявки между услугите от индивидуални клиенти, с цел осигуряване на по-добра сигурност. В примера, архитектурата демонстрира разделяне на API шлюзовете въз основа на това дали заявката идва от уеб или мобилен клиент. Oсъществяването на Azure се нарича API Management (APIM). То помага на организациите да публикуват  проограмните интефейси по последователен и управляем начин. 

Различните back-end услуги, използвани от eShop, имат различни изисквания за съхранение на данните. Azure предоставя много видове хранилища за данни, които могат да помогнат за поддържка и извличане на данни:
•	Azure SQL Database - Това е обачно базиран SQL Server. Поведението му е същото като това на основното изпълнение на базата, но предлага и много предимства: репликира в реално време данни в други географски региони, маскира данни за определени потребители, предоставя пълен одит на всички действия, които са се случили върху данните
•	Azure Cosmos DB е нов вид нерелационната база данни, която работи с механизъм за съхранение и предоставяне на данни, който използва свободен модел, също така включва ниска латентност, репликация на данни в други географски региони в реално време, управление на трафика, автоматично индексиране на данните.;
•	Azure предоставя улуги за бази данни MySQL, PostgreSQL и MariaDB като универсално достъпни, мащабируеми, силно защитени и напълно управлявани.
