Introduction to Containers and Docker 1
What is Docker?2
Comparing Docker containers with virtual machines...3
A simple analogy.4
Docker terminology 5
Docker containers, images, and registries .....7
Choosing Between .NET 5 and .NET Framework for Docker Containers... 9
General guidance.....9
When to choose .NET for Docker containers..... 10
Developing and deploying cross platform .... 10
Using containers for new (“green-field”) projects....... 11
Create and deploy microservices on containers.. 11
Deploying high density in scalable systems.. 11
When to choose .NET Framework for Docker containers..... 12
Migrating existing applications directly to a Windows Server container .. 12
Using third-party .NET libraries or NuGet packages not available for .NET 5 . 12
Using .NET technologies not available for .NET 5....... 12
Using a platform or API that doesn’t support .NET 5  13
Decision table: .NET frameworks to use for Docker 13
What OS to target with .NET containers...... 14
Official .NET Docker images ..... 16
.NET and Docker image optimizations for development versus production ... 16
Architecting container and microservice-based applications .. 18
Container design principles ...... 18
Containerizing monolithic applications ....... 19
Deploying a monolithic application as a container.... 21
Publishing a single-container-based application to Azure App Service.... 21
State and data in Docker applications.. 22

ii Contents
Service-oriented architecture... 25
Microservices architecture. 25
Additional resources ....... 27
Data sovereignty per microservice  27
The relationship between microservices and the Bounded Context pattern... 29
Logical architecture versus physical architecture..... 30
Challenges and solutions for distributed data management...... 31
Challenge #1: How to define the boundaries of each microservice.... 31
Challenge #2: How to create queries that retrieve data from several microservices.... 32
Challenge #3: How to achieve consistency across multiple microservices ....... 33
Challenge #4: How to design communication across microservice boundaries .... 35
Additional resources ....... 36
Identify domain-model boundaries for each microservice.. 36
The API gateway pattern versus the Direct client-to-microservice communication.. 40
Direct client-to-microservice communication ...... 40
Why consider API Gateways instead of direct client-to-microservice communication ....... 41
What is the API Gateway pattern?..... 42
Main features in the API Gateway pattern ..... 44
Using products with API Gateway features.... 45
Drawbacks of the API Gateway pattern... 47
Additional resources ....... 48
Communication in a microservice architecture  48
Communication types .... 49
Asynchronous microservice integration enforces microservice’s autonomy ... 50
Communication styles .... 52
Asynchronous message-based communication....... 54
Single-receiver message-based communication  55
Multiple-receivers message-based communication .. 56
Asynchronous event-driven communication 56
A note about messaging technologies for production systems ... 57
Resiliently publishing to the event bus ... 58
Additional resources ....... 58

iii Contents
Creating, evolving, and versioning microservice APIs and contracts ....... 59
Additional resources ....... 59
Microservices addressability and the service registry .... 60
Additional resources ....... 60
Creating composite UI based on microservices ....... 60
Additional resources ....... 62
Resiliency and high availability in microservices ...... 63
Health management and diagnostics in microservices .... 63
Additional resources ....... 65
Orchestrate microservices and multi-container applications for high scalability and availability ....... 66
Software platforms for container clustering, orchestration, and scheduling... 68
Using container-based orchestrators in Microsoft Azure 68
Using Azure Kubernetes Service  68
Development environment for Kubernetes... 69
Getting started with Azure Kubernetes Service (AKS) ....... 70
Deploy with Helm charts into Kubernetes clusters..... 70
Use Azure Dev Spaces for your Kubernetes application lifecycle. 71
Additional resources ....... 72
Development process for Docker-based applications....... 73
Development environment for Docker apps ..... 73
Development tool choices: IDE or editor 73
Additional resources ....... 74
.NET languages and frameworks for Docker containers ....... 74
Development workflow for Docker apps..... 74
Workflow for developing Docker container-based applications .. 74
Step 1. Start coding and create your initial application or service baseline..... 76
Step 2. Create a Dockerfile related to an existing .NET base image.... 77
Step 3. Create your custom Docker images and embed your application or service in them.. 84
Step 4. Define your services in docker-compose.yml when building a multi-container Docker
application .. 85
Step 5. Build and run your Docker application .... 88
Step 6. Test your Docker application using your local Docker host.... 90

iv Contents
Simplified workflow when developing containers with Visual Studio  92
Using PowerShell commands in a Dockerfile to set up Windows Containers. 93
Designing and Developing Multi-Container and Microservice-Based .NET Applications
. 94
Design a microservice-oriented application ...... 94
Application specifications ..... 94
Development team context . 95
Choosing an architecture...... 95
Benefits of a microservice-based solution ..... 98
Downsides of a microservice-based solution ....... 99
External versus internal architecture and design patterns.....100
The new world: multiple architectural patterns and polyglot microservices..101
Creating a simple data-driven CRUD microservice .......103
Designing a simple CRUD microservice 103
Implementing a simple CRUD microservice with ASP.NET Core.104
The DB connection string and environment variables used by Docker containers .....110
Generating Swagger description metadata from your ASP.NET Core Web API ...112
Defining your multi-container application with docker-compose.yml .117
Use a database server running as a container 128
SQL Server running as a container with a microservice-related database......129
Seeding with test data on Web application startup.130
EF Core InMemory database versus SQL Server running as a container.133
Using a Redis cache service running in a container.133
Implementing event-based communication between microservices (integration events) ...134
Using message brokers and services buses for production systems 135
Integration events..136
The event bus ..136
Additional resources .....139
Implementing an event bus with RabbitMQ for the development or test environment.......139
Implementing a simple publish method with RabbitMQ.......140
Implementing the subscription code with the RabbitMQ API.....141
Additional resources .....142

v Contents
Subscribing to events142
Publishing events through the event bus.....143
Idempotency in update message events......150
Deduplicating integration event messages .151
Testing ASP.NET Core services and web apps 153
Testing in eShopOnContainers.156
Implement background tasks in microservices with IHostedService and the BackgroundService class
....158
Registering hosted services in your WebHost or Host ...159
The IHostedService interface.....160
Implementing IHostedService with a custom hosted service class deriving from the
BackgroundService base class...161
Additional resources .....164
Implement API Gateways with Ocelot164
Architect and design your API Gateways......164
Implementing your API Gateways with Ocelot ..169
Using Kubernetes Ingress plus Ocelot API Gateways ......181
Additional cross-cutting features in an Ocelot API Gateway .......182
Tackle Business Complexity in a Microservice with DDD and CQRS Patterns ...... 183
Apply simplified CQRS and DDD patterns in a microservice.....185
Additional resources .....187
Apply CQRS and CQS approaches in a DDD microservice in eShopOnContainers .187
CQRS and DDD patterns are not top-level architectures.......188
Implement reads/queries in a CQRS microservice 189
Use ViewModels specifically made for client apps, independent from domain model constraints
.......190
Use Dapper as a micro ORM to perform queries......190
Dynamic versus static ViewModels .191
Additional resources .....194
Design a DDD-oriented microservice .195
Keep the microservice context boundaries relatively small ..195
Layers in DDD microservices .....196

vi Contents
Design a microservice domain model 199
The Domain Entity pattern .200
Implement a microservice domain model with .NET....205
Domain model structure in a custom .NET Standard Library .......205
Structure aggregates in a custom .NET Standard library .......206
Implement domain entities as POCO classes .....207
Encapsulate data in the Domain Entities ......208
Seedwork (reusable base classes and interfaces for your domain model)..211
The custom Entity base class.....212
Repository contracts (interfaces) in the domain model layer ......213
Additional resources .....214
Implement value objects..214
Important characteristics of value objects ...215
Value object implementation in C#216
How to persist value objects in the database with EF Core 2.0 and later217
Persist value objects as owned entity types in EF Core 2.0 and later218
Additional resources .....221
Use enumeration classes instead of enum types ...222
Implement an Enumeration base class..222
Additional resources .....223
Design validations in the domain model layer .......224
Implement validations in the domain model layer...224
Additional resources .....226
Client-side validation (validation in the presentation layers)....227
Additional resources .....227
Domain events: design and implementation...228
What is a domain event?.....228
Domain events versus integration events ....229
Domain events as a preferred way to trigger side effects across multiple aggregates within the
same domain ...229
Implement domain events..232
Conclusions on domain events.239

vii Contents
Additional resources .....239
Design the infrastructure persistence layer......240
The Repository pattern 240
Additional resources .....244
Implement the infrastructure persistence layer with Entity Framework Core ....245
Introduction to Entity Framework Core.245
Infrastructure in Entity Framework Core from a DDD perspective.....246
Implement custom repositories with Entity Framework Core......247
EF DbContext and IUnitOfWork instance lifetime in your IoC container.250
The repository instance lifetime in your IoC container...250
Table mapping 251
Implement the Query Specification pattern254
Use NoSQL databases as a persistence infrastructure.256
Introduction to Azure Cosmos DB and the native Cosmos DB API ...257
Implement .NET code targeting MongoDB and Azure Cosmos DB ..259
Design the microservice application layer and Web API ....267
Use SOLID principles and Dependency Injection......267
Implement the microservice application layer using the Web API .268
Use Dependency Injection to inject infrastructure objects into your application layer.....268
Implement the Command and Command Handler patterns .......272
The Command process pipeline: how to trigger a command handler.....279
Implement the command process pipeline with a mediator pattern (MediatR) ..282
Apply cross-cutting concerns when processing commands with the Behaviors in MediatR ..288
Implement resilient applications ....... 292
Handle partial failure.293
Strategies to handle partial failure.......295
Additional resources .....296
Implement retries with exponential backoff ....296
Implement resilient Entity Framework Core SQL connections..296
Execution strategies and explicit transactions using BeginTransaction and multiple DbContexts297
Additional resources .....299
Use IHttpClientFactory to implement resilient HTTP requests .299

viii Contents
Issues with the original HttpClient class available in .NET.....299
Benefits of using IHttpClientFactory.......300
Multiple ways to use IHttpClientFactory.......301
How to use Typed Clients with IHttpClientFactory...301
Additional resources .....304
Implement HTTP call retries with exponential backoff with IHttpClientFactory and Polly policies ...305
Add a jitter strategy to the retry policy .306
Additional resources .....306
Implement the Circuit Breaker pattern.......306
Implement Circuit Breaker pattern with IHttpClientFactory and Polly .....307
Test Http retries and circuit breakers in eShopOnContainers......308
Additional resources .....310
Health monitoring ......310
Implement health checks in ASP.NET Core services 311
Use watchdogs315
Health checks when using orchestrators ......317
Advanced monitoring: visualization, analysis, and alerts .......317
Additional resources .....318
Make secure .NET Microservices and Web Applications. 319
Implement authentication in .NET microservices and web applications ......319
Authenticate with ASP.NET Core Identity.....320
Authenticate with external providers .....321
Authenticate with bearer tokens......323
Authenticate with an OpenID Connect or OAuth 2.0 Identity provider...324
Issue security tokens from an ASP.NET Core service .......325
Consume security tokens....326
Additional resources..327
About authorization in .NET microservices and web applications ..328
Implement role-based authorization .....328
Implement policy-based authorization .329
Additional resources .....330
Store application secrets safely during development..330

ix Contents
Store secrets in environment variables .331
Store secrets with the ASP.NET Core Secret Manager ....331
Use Azure Key Vault to protect secrets at production time ......332
Additional resources .....333
Key Takeaways..... 334
