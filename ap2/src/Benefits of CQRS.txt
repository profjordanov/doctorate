Benefits of CQRS

Scalability
When we separate Read and Write databases, we can also
scale these separate databases independently. Read
databases follows denormalized data to perform complex join
queries
If application is read incentive application , we can scale read
database more then write database.
Query Performance
The read database includes denormalized data that reduce to
comlex and long running join queries. C omplex business
logic goes into the write database. I mproves application
performance for all aspects.
Maintability and Flexibility
F lexibility of system that is better evolve over time and not
affected to update commands and schema changes by
separating read and write concerns into different databases.
Better implemented if we physically separate the read and
write databases



6.	Discussion
After the presentation of the findings from the case study, the following chapter will consolidate the observations to draw a complete picture of the implementaion of DDD.
6.1. Implications and Recommendations
The study is among the first to develop an in-depth understanding of how the adoption of DDD influences the cloud-native Azure and .NET services. As outlined, previous studies have provided initial indications for potential implications. Motivated by this and the growing popularity of the modern software design, this study has set out to explore the DDD concepts and to embed them into Microsoft ecosystem. It also draws on extant theory and incorporates implications into a theoretically deduced framework.
6.2. Challenges and Limitations
Discussing the challenges encountered and what lessons can be drawn for future DDD implementations.
7.	Conclusion and Future Work
Summary of Findings
Recap the key findings of this empirical study.






Drawbacks of CQRS
Complexity
CQRS makes your system more complex design.
S trategically choose where we use and how we can separate
read and write database
Eventual Consistency
T he read data may be stay old and not updated for a
particular time. So the client could see old data even write
database updated, it will take some time to update read data
due to publish/subscribe mechanism.
We should
embrace the Eventual Consistency when using
CQRS , if your application required strong consistency than
CQRS is not good to apply



Best Practices for CQRS
Best practices to separate read and write database with 2
database physically
Read intensive that means reading more than writing can
define custom data schema to optimized for queries .
Materialized View Pattern is good example to implement
reading databases.
Avoid complex joins and mappings with pre defined fine
grained data for query operations .
Use different database for reading and writing database
types
Using No SQL document database for reading and using
R elational database for CRUD operations.